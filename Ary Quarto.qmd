---
title: "UNICEF Data Analysis for DCU"
subtitle: "Mapping Global Disparities in Youth HIV Knowledge"
author: "Fareedah Martins"
date: "26 April 2025"
format:
  html:
    toc: true
    toc-location: left
    theme: cosmo
    embed-resources: true
    code-fold: true
    title-block-banner: false
    include-in-header:
      text: |
        <title>DCU Assignment</title>
        <style>
        body {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
          line-height: 1.5;
          max-width: 1500px;
          margin: 0 0 0 220px;
          padding: 0.7rem 0.2rem;
          background-color: #ffffff;
          color: #2d3436;
        }
        .title, .subtitle, .author, .date, h1, h2, h3, h4, h5, h6, p, ul, ol, .callout, .callout-note, #TOC {
          text-align: left !important;
        }
        .title {
          font-size: 2.2rem;
          font-weight: 700;
          margin-bottom: 0.2rem;
          color: #2d3436;
        }
        .subtitle {
          font-size: 1.3rem;
          color: #2d3436;
          font-weight: normal;
          margin-bottom: 1.2rem;
        }
        .author, .date {
          font-size: 1.2rem;
          color: #2d3436;
          margin: 0.5rem 0;
        }
        h1, h2, h3, h4, h5, h6 {
          color: #2d3436;
          font-weight: 600;
          margin-top: 2.2rem;
          margin-bottom: 1.1rem;
        }
        section {
          margin-bottom: 2.2rem;
        }
        .cell-output {
          margin: 2rem 0;
        }
        .nav-footer {
          margin-top: 2rem;
          border-top: 1px solid #e0e0e0;
          padding-top: 1rem;
        }
        .callout, .callout-note {
          margin: 0.5rem 0 1.2rem 0;
          padding: 0.7rem 1rem;
          background-color: #f8f9fa;
          border: none;
          border-radius: 6px;
        }
        .callout strong, .callout-note strong {
          color: #2d3436;
        }
        .callout-title, .callout-note .callout-title, .callout-note strong, .callout strong {
          text-align: left !important;
          margin-left: 0 !important;
          padding-left: 0 !important;
          display: block;
        }
        #toc-title {
          font-size: 1.2rem;
          color: #2d3436;
          font-weight: 600;
        }
        #TOC {
          margin-bottom: 2.2rem;
        }
        .toc-actions {
          display: none;
        }
        /* Custom code block styling */
        pre, .cell-output pre, .cell-output code, .cell-output .sourceCode, .cell-output .code {
          background: #f4f6fa !important;
          color: #222;
          border-radius: 8px;
          padding: 1em;
          font-size: 1em;
          overflow-x: auto;
        }
        details > summary {
          cursor: pointer;
        }
        .sidebar, .quarto-sidebar {
          left: 0;
          width: 260px;
          position: fixed;
          top: 0;
          height: 100%;
          background: #fff;
          z-index: 1000;
        }
        .cell-output, .cell-output .js-plotly-plot, .cell-output .plotly-graph-div {
          max-width: 100% !important;
          overflow-x: auto !important;
        }
        </style>
jupyter: python3
---

::: {.callout-note}
**Tableau Dashboard**

This is my Tableau dashboard I did previously. [View the interactive dashboard here.](https://public.tableau.com/app/profile/ary.martins/viz/Book1_17423958044360/Dashboard1)
:::

```{python}
#| label: setup
#| include: false

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from plotly.subplots import make_subplots
from scipy import stats

# Set consistent theme for all plots
theme_config = {
    'font_family': '-apple-system, BlinkMacSystemFont, "Segoe UI", system-ui, sans-serif',
    'background_color': '#ffffff',
    'grid_color': '#e0e0e0',
    'title_font_size': 24,
    'axis_font_size': 14,
    'tick_font_size': 12,
    'legend_font_size': 12,
    'text_color': '#2d3436',
    'axis_color': '#2d3436',
    'colorscale': [
        [0, '#f7f7f7'],
        [0.25, '#d4d4d4'],
        [0.5, '#a3a3a3'],
        [0.75, '#737373'],
        [1, '#404040']
    ]
}

def apply_theme(fig):
    fig.update_layout(
        font_family=theme_config['font_family'],
        plot_bgcolor='white',
        paper_bgcolor='white',
        title_font=dict(
            size=theme_config['title_font_size'],
            color=theme_config['text_color'],
            family=theme_config['font_family']
        ),
        legend_font=dict(
            size=theme_config['legend_font_size'],
            color=theme_config['text_color'],
            family=theme_config['font_family']
        ),
        margin=dict(t=80, r=40, b=60, l=60)
    )
    fig.update_xaxes(
        showgrid=True,
        gridcolor=theme_config['grid_color'],
        gridwidth=1,
        color=theme_config['axis_color'],
        tickfont=dict(
            size=theme_config['tick_font_size'],
            color=theme_config['text_color'],
            family=theme_config['font_family']
        )
    )
    fig.update_yaxes(
        showgrid=True,
        gridcolor=theme_config['grid_color'],
        gridwidth=1,
        color=theme_config['axis_color'],
        tickfont=dict(
            size=theme_config['tick_font_size'],
            color=theme_config['text_color'],
            family=theme_config['font_family']
        )
    )
    return fig
```

## 1. World Map: HIV Knowledge Disparities

Step into the global landscape of youth HIV knowledge. This map invites us to travel across continents, revealing not just numbers, but **stories of awareness, progress, and persistent gaps**. As we move from region to region, we see how some countries have become **beacons of knowledge**, while others still face **significant challenges**. The colors on this map are more than dataâ€”they are a **call to action**, highlighting where the world is succeeding and where it must do more.

```{python}
#| label: world-map
#| warning: false

# Read and prepare the data
df = pd.read_csv("unicef_indicator_1.csv")

# Dictionary mapping country names to ISO codes
country_to_iso = {
    'Afghanistan': 'AFG', 'Albania': 'ALB', 'Armenia': 'ARM', 'Azerbaijan': 'AZE',
    'Bangladesh': 'BGD', 'Benin': 'BEN', 'Bolivia, Plurinational State of': 'BOL',
    'Burkina Faso': 'BFA', 'Burundi': 'BDI', 'Cambodia': 'KHM', 'Cameroon': 'CMR',
    'Chad': 'TCD', 'Colombia': 'COL', 'Comoros': 'COM', 'Congo': 'COG',
    'Congo, the Democratic Republic of the': 'COD', 'Dominican Republic': 'DOM',
    'Egypt': 'EGY', 'Ethiopia': 'ETH', 'Gabon': 'GAB', 'Gambia': 'GMB',
    'Ghana': 'GHA', 'Guinea': 'GIN', 'Guyana': 'GUY', 'Haiti': 'HTI',
    'Honduras': 'HND', 'India': 'IND', 'Indonesia': 'IDN', 'Ivory Coast': 'CIV',
    'Jordan': 'JOR', 'Kenya': 'KEN', 'Lebanon': 'LBN', 'Lesotho': 'LSO',
    'Madagascar': 'MDG', 'Malawi': 'MWI', 'Maldives': 'MDV', 'Mali': 'MLI',
    'Mauritania': 'MRT', 'Morocco': 'MAR', 'Mozambique': 'MOZ', 'Myanmar': 'MMR',
    'Namibia': 'NAM', 'Nepal': 'NPL', 'Nicaragua': 'NIC', 'Nigeria': 'NGA',
    'Pakistan': 'PAK', 'Papua New Guinea': 'PNG', 'Peru': 'PER', 'Philippines': 'PHL',
    'Rwanda': 'RWA', 'Sao Tome and Principe': 'STP', 'Senegal': 'SEN',
    'Sierra Leone': 'SLE', 'Somalia': 'SOM', 'Swaziland': 'SWZ', 'Tajikistan': 'TJK',
    'Tanzania, United Republic of': 'TZA', 'Thailand': 'THA', 'Timor-Leste': 'TLS',
    'Togo': 'TGO', 'Uganda': 'UGA', 'Ukraine': 'UKR', 'Vietnam': 'VNM',
    'Zambia': 'ZMB', 'Zimbabwe': 'ZWE'
}

# Get the latest data for each country
latest_data = df.sort_values('time_period').groupby(['country', 'sex']).last().reset_index()

# Create separate dataframes for female data
female_data = latest_data[latest_data['sex'] == 'Female'].copy()

# Add ISO codes to the dataframe
female_data['iso_alpha'] = female_data['country'].map(country_to_iso)

# Create the choropleth map
fig = go.Figure()

# Add female data choropleth
fig.add_trace(go.Choropleth(
    locations=female_data['iso_alpha'],
    z=female_data['obs_value'],
    text=female_data['country'],
    customdata=female_data[['country', 'obs_value', 'time_period']],
    hovertemplate="<b>%{customdata[0]}</b><br>HIV Knowledge: %{customdata[1]:.1f}%<br>Year: %{customdata[2]}<extra></extra>",
    colorscale=[
        [0, '#fde0ef'],
        [0.2, '#fa9fb5'],
        [0.4, '#f768a1'],
        [0.6, '#c51b8a'],
        [0.8, '#7a0177'],
        [1, '#49006a']
    ],
    autocolorscale=False,
    reversescale=False,
    marker_line_color='#e0e0e0',
    marker_line_width=0.7,
    colorbar=dict(
        title="HIV Knowledge (%)",
        thickness=14,
        len=0.4,
        x=0.5,
        y=0.02,
        xanchor='center',
        yanchor='bottom',
        bgcolor='rgba(255,255,255,0.5)',
        orientation='h',
        borderwidth=0,
        outlinewidth=0,
        tickfont=dict(
            family=theme_config['font_family'],
            size=theme_config['tick_font_size'],
            color=theme_config['axis_color']
        ),
        titlefont=dict(
            family=theme_config['font_family'],
            size=theme_config['axis_font_size'],
            color=theme_config['axis_color']
        ),
        tickformat='.0f',
        ticksuffix='%'
    )
))

# Update layout with improved map settings
fig.update_layout(
    title=dict(
        text='Global Youth HIV Knowledge Distribution',
        font=dict(
            size=theme_config['title_font_size'],
            family=theme_config['font_family'],
            color=theme_config['text_color']
        ),
        y=0.95,
        x=0.5,
        xanchor='center',
        yanchor='top'
    ),
    geo=dict(
        showframe=False,
        showcoastlines=True,
        coastlinecolor='#b0b0b0',
        projection_type='miller',
        projection_scale=1.1,
        center=dict(lon=0, lat=20),
        lonaxis=dict(
            range=[-180, 180],
            showgrid=False
        ),
        lataxis=dict(
            range=[-60, 90],
            showgrid=False
        ),
        showland=True,
        landcolor='#f8f9fa',
        showocean=True,
        oceancolor='#f4f6fa',
        showlakes=True,
        lakecolor='#f4f6fa',
        showcountries=True,
        countrycolor='#e0e0e0',
        bgcolor='#ffffff'
    ),
    paper_bgcolor='#ffffff',
    plot_bgcolor='#ffffff',
    autosize=True,
    height=520,
    margin=dict(r=10, t=60, l=10, b=20),
    annotations=[
        dict(
            x=0.5,
            y=-0.1,
            xref='paper',
            yref='paper',
            text='Source: UNICEF Global Database | Latest available data per country',
            showarrow=False,
            font=dict(
                size=10,
                family=theme_config['font_family'],
                color='#6B7280'
            )
        )
    ]
)

fig.show()
```

## 2. Bar Chart: Gender Knowledge Gaps

Let's zoom in on the countries where the **gender gap** in HIV knowledge is most pronounced. This chart introduces us to the places where boys and girls are learning **very different lessons** about HIV. Each bar is a story of **opportunity or missed connection**, and together, they reveal where **targeted interventions** could make the biggest difference.

```{python}
#| label: gender-gaps
#| warning: false

# Get the latest data for each country and gender
latest_data = df.sort_values('time_period').groupby(['country', 'sex']).last().reset_index()

# Pivot the data to get male and female values in separate columns
gender_gap = latest_data.pivot(index='country', columns='sex', values='obs_value').reset_index()
gender_gap.columns.name = None
gender_gap = gender_gap.rename(columns={'Female': 'female_knowledge', 'Male': 'male_knowledge'})

# Calculate absolute gender gap
gender_gap['gap'] = abs(gender_gap['female_knowledge'] - gender_gap['male_knowledge'])

# Sort by absolute gap and get top 5 countries
top_gaps = gender_gap.nlargest(5, 'gap').copy()

# Create the bar chart
fig = go.Figure()

# Add bars for females
fig.add_trace(go.Bar(
    x=top_gaps['country'],
    y=top_gaps['female_knowledge'],
    name='Female',
    marker_color='#FF69B4',
    text=top_gaps['female_knowledge'].round(1).astype(str) + '%',
    textposition='auto',
))

# Add bars for males
fig.add_trace(go.Bar(
    x=top_gaps['country'],
    y=top_gaps['male_knowledge'],
    name='Male',
    marker_color='#4169E1',
    text=top_gaps['male_knowledge'].round(1).astype(str) + '%',
    textposition='auto',
))

# Apply theme
fig = apply_theme(fig)

# Update specific layout settings
fig.update_layout(
    title='Top 5 Countries with Largest Gender Gaps in HIV Knowledge',
    barmode='group',
    xaxis_title='Country',
    yaxis_title='HIV Knowledge (%)',
    showlegend=True,
    legend=dict(
        yanchor="top",
        y=0.99,
        xanchor="right",
        bgcolor='rgba(255,255,255,0.8)',
        bordercolor='rgba(0,0,0,0.1)',
        borderwidth=1
    )
)

# Add gap values as annotations
for idx, row in top_gaps.iterrows():
    gap_value = abs(row['female_knowledge'] - row['male_knowledge'])
    higher_value = max(row['female_knowledge'], row['male_knowledge'])
    fig.add_annotation(
        x=row['country'],
        y=higher_value + 2,
        text=f'Gap: {gap_value:.1f}%',
        showarrow=False,
        font=dict(size=10, color='#4B5563')
    )

fig.show()
```

## 3. Scatterplot with Regression: Economic Development and HIV Knowledge

Now, let's explore the **intersection of wealth and awareness**. This scatterplot tells the story of how **economic development and HIV knowledge are intertwined**. Each bubble is a country, and its position reveals whether **prosperity translates into better understanding**â€”or if some nations are **defying expectations**.

```{python}
#| label: economic-development
#| warning: false

# Read the data
hiv_data = pd.read_csv("unicef_indicator_1.csv")
metadata = pd.read_csv("metadata.csv")

# Get latest HIV knowledge data for each country
latest_hiv = (hiv_data.sort_values('time_period')
              .groupby('country')['obs_value']
              .last()
              .reset_index())

# Merge with metadata
merged_data = pd.merge(latest_hiv, metadata, on='country', how='inner')

# Create scatter plot
fig = px.scatter(merged_data, 
                x='gdp_per_capita',
                y='obs_value',
                size='population',
                size_max=40,
                hover_name='country',
                hover_data={
                    'gdp_per_capita': ':,.0f',
                    'obs_value': ':.1f',
                    'population': ':,.0f',
                    'country': False
                },
                labels={
                    'gdp_per_capita': 'GDP per Capita (USD)',
                    'obs_value': 'HIV Knowledge (%)',
                    'population': 'Population'
                },
                color_discrete_sequence=['#f768a1'])

# Calculate and add trendline
z = np.polyfit(merged_data['gdp_per_capita'], merged_data['obs_value'], 1)
p = np.poly1d(z)
r2 = np.corrcoef(merged_data['gdp_per_capita'], merged_data['obs_value'])[0,1]**2

x_range = np.linspace(merged_data['gdp_per_capita'].min(), merged_data['gdp_per_capita'].max(), 100)
fig.add_trace(
    go.Scatter(
        x=x_range,
        y=p(x_range),
        mode='lines',
        name=f'Trend (RÂ² = {r2:.2f})',
        line=dict(color='#c51b8a', dash='dash', width=2)
    )
)

# Apply theme
fig = apply_theme(fig)

# Update specific layout settings
fig.update_layout(
    title='Economic Development and HIV Knowledge by Country',
    xaxis_type='log',
    showlegend=False,
    height=600
)

fig.show()
```

## 4. Regional Trend Lines: Progress Comparison

Let's follow the **evolving stories of Africa and Asia** as they strive to improve youth HIV knowledge. These lines are more than dataâ€”they are the **footprints of policy, education, and social change over time**. Watch as the regions move forward, sometimes together, sometimes apart, and consider what **drives their journeys**.

```{python}
#| label: regional-trends
#| warning: false

# Define regions
african_countries = [
    'Kenya', 'Rwanda', 'Uganda', 'Tanzania, United Republic of', 
    'Zimbabwe', 'Namibia', 'Zambia', 'Malawi', 'Ethiopia',
    'Nigeria', 'Ghana', 'Senegal', 'Mali', 'Burkina Faso',
    'Mozambique', 'Congo', 'Cameroon', 'Chad', 'Benin',
    'Ivory Coast', 'Madagascar', 'Sierra Leone'
]

asian_countries = [
    'India', 'Bangladesh', 'Nepal', 'Pakistan', 'Afghanistan',
    'Indonesia', 'Philippines', 'Vietnam', 'Cambodia', 'Thailand',
    'Myanmar', 'Timor-Leste', 'Maldives', 'Jordan', 'Lebanon'
]

# Create region mapping
region_mapping = {
    country: 'Africa' for country in african_countries
}
region_mapping.update({
    country: 'Asia' for country in asian_countries
})

# Prepare data
df['year'] = pd.to_numeric(df['time_period'].str.extract(r'(\d{4})')[0])
df['region'] = df['country'].map(region_mapping)

# Calculate regional averages
regional_trends = df[df['region'].notna()].groupby(['region', 'year', 'sex'])['obs_value'].mean().reset_index()

# Create figure
fig = go.Figure()

# Color mapping
colors = {
    'Africa': {'Female': '#FF69B4', 'Male': '#FF1493'},
    'Asia': {'Female': '#4169E1', 'Male': '#000080'}
}

# Add lines for each region and gender
for region in ['Africa', 'Asia']:
    for gender in ['Female', 'Male']:
        data = regional_trends[
            (regional_trends['region'] == region) & 
            (regional_trends['sex'] == gender)
        ]
        
        fig.add_trace(go.Scatter(
            x=data['year'],
            y=data['obs_value'],
            name=f'{region} - {gender}',
            mode='lines+markers',
            line=dict(
                width=2,
                color=colors[region][gender]
            ),
            marker=dict(
                size=10,
                line=dict(width=2, color='white'),
                symbol='circle'
            ),
            hovertemplate="Gender: " + gender + "<br>Year: %{x}<br>Knowledge: %{y:.1f}%<extra></extra>"
        ))

# Add policy events with improved positioning

# Apply theme
fig = apply_theme(fig)

# Update specific layout settings
fig.update_layout(
    title='Regional HIV Knowledge Trends: Africa vs Asia',
    xaxis_title='Year',
    yaxis_title='HIV Knowledge (%)',
    yaxis_range=[0, 70],
    legend=dict(
        yanchor="top",
        y=0.99,
        xanchor="right",
        bgcolor='rgba(255,255,255,0.8)',
        bordercolor='rgba(0,0,0,0.1)',
        borderwidth=1
    ),
    height=500
)

fig.show()
```

## 5. Age-Based Analysis: Youth HIV Knowledge Distribution

Finally, we look at how **knowledge is passed from one generation to the next**. This chart is a snapshot of **learning across ages, regions, and genders**. It asks us: Are we **reaching the youngest**, or **leaving them behind**? Are boys and girls **learning together, or apart**? The answers shape the **future of HIV prevention**.

```{python}
#| label: age-analysis
#| warning: false

# Load and prepare data
df = pd.read_csv("unicef_indicator_1.csv")

# Define regions for grouping
regions = {
    'Africa': ['Kenya', 'Rwanda', 'Uganda', 'Tanzania, United Republic of', 
               'Zimbabwe', 'Namibia', 'Zambia', 'Malawi', 'Ethiopia',
               'Nigeria', 'Ghana', 'Senegal', 'Mali', 'Burkina Faso',
               'Mozambique', 'Congo', 'Cameroon', 'Chad', 'Benin',
               'Ivory Coast', 'Madagascar', 'Sierra Leone'],
    'Asia': ['India', 'Bangladesh', 'Nepal', 'Pakistan', 'Afghanistan',
             'Indonesia', 'Philippines', 'Vietnam', 'Cambodia', 'Thailand',
             'Myanmar', 'Timor-Leste', 'Maldives', 'Jordan', 'Lebanon']
}

# Create region mapping
region_mapping = {}
for region, countries in regions.items():
    for country in countries:
        region_mapping[country] = region

# Add region column
df['region'] = df['country'].map(region_mapping)

# Calculate average knowledge by region and sex
regional_data = (df[df['region'].notna()]
                .groupby(['region', 'sex'])['obs_value']
                .mean()
                .reset_index())

# Create the visualization
fig = go.Figure()

# Color scheme for regions
colors = {
    'Africa': {'Female': '#2171b5', 'Male': '#6baed6'},  # Blue shades
    'Asia': {'Female': '#f768a1', 'Male': '#fbb4b9'}     # Pink shades
}

# Add bars for each region and gender
for region in ['Africa', 'Asia']:
    region_data = regional_data[regional_data['region'] == region]
    
    # Female data
    female_data = region_data[region_data['sex'] == 'Female']
    fig.add_trace(go.Bar(
        name=f'{region} (Female)',
        x=[region],
        y=female_data['obs_value'],
        marker_color=colors[region]['Female'],
        text=female_data['obs_value'].round(1).astype(str) + '%',
        textposition='auto',
        width=0.35,
        offset=-0.2
    ))
    
    # Male data
    male_data = region_data[region_data['sex'] == 'Male']
    fig.add_trace(go.Bar(
        name=f'{region} (Male)',
        x=[region],
        y=male_data['obs_value'],
        marker_color=colors[region]['Male'],
        text=male_data['obs_value'].round(1).astype(str) + '%',
        textposition='auto',
        width=0.35,
        offset=0.2
    ))

# Update layout
fig.update_layout(
    title=dict(
        text='Africa & Asia: HIV Knowledge by Gender',
        font=dict(size=20, family='Inter, system-ui, sans-serif')
    ),
    xaxis_title='Region',
    yaxis_title='HIV Knowledge (%)',
    barmode='group',
    plot_bgcolor='white',
    height=500,
    showlegend=True,
    legend=dict(
        yanchor="top",
        y=0.99,
        xanchor="right",
        bgcolor='rgba(255,255,255,0.8)',
        bordercolor='rgba(0,0,0,0.1)',
        borderwidth=1
    ),
    yaxis=dict(
        range=[0, 70],
        gridcolor='rgba(0,0,0,0.1)',
        ticksuffix='%'
    ),
    xaxis=dict(
        tickangle=0,
        gridcolor='rgba(0,0,0,0.1)'
    )
)

# Add annotations for key findings
fig.add_annotation(
    x=0.5,
    y=65,
    text="Africa shows consistently higher HIV knowledge levels",
    showarrow=False,
    font=dict(size=12),
    bgcolor='rgba(255,255,255,0.8)',
    bordercolor='rgba(0,0,0,0.1)',
    borderwidth=1,
    borderpad=4
)

fig.show()
```

## Looking Ahead: Bridging the Gap

Our analysis points to three key recommendations:

1. **Target the Gaps**: Focus resources on regions showing persistently low knowledge levels
2. **Learn from Leaders**: Adapt successful strategies from top-performing countries
3. **Integrate Solutions**: Consider the interconnected nature of health education and outcomes
